[
  {
    "front": "What are two key issues addressed by web server farms?",
    "back": "1. **Redundancy:** Eliminates a single point of failure through backup and failover strategies.\n2. **Security:** Secure areas are placed behind firewalls to monitor traffic, perform network/port address translation, and handle SSL.",
    "tags": [
      "Networking",
      "Web Server"
    ]
  },
  {
    "front": "What is serverless architecture in simple terms?",
    "back": "It's a cloud computing model where you use resources provided by a service on-demand, rather than building and maintaining your own servers. You ask for resources when you need them and stop using them when you're done.",
    "tags": [
      "Web Architecture",
      "Serverless"
    ]
  },
  {
    "front": "What is the purpose of the HTML `<dl>` tag, and what are its main child elements?",
    "back": "The `<dl>` tag defines a definition list. Its child elements are `<dt>` (definition term) and `<dd>` (definition description). Both were deprecated in HTML4 but reintroduced in HTML5.",
    "tags": [
      "HTML",
      "Lists"
    ]
  },
  {
    "front": "How can you create a nested, multi-level ordered list in HTML with different numbering styles (e.g., starting at 4, then using 'a', then 'i')?",
    "back": "By nesting `<ol>` elements. The starting number is set with the `start` attribute (e.g., `<ol start=\"4\">`). The numbering style is set with the `type` attribute (e.g., `<ol type=\"A\">`, `<ol type=\"I\">`).",
    "tags": [
      "HTML",
      "Lists"
    ]
  },
  {
    "front": "What do the `rowspan` and `colspan` attributes do in an HTML table?",
    "back": "`rowspan` specifies the number of rows a cell should span (merge vertically). `colspan` specifies the number of columns a cell should span (merge horizontally).",
    "tags": [
      "HTML",
      "Tables"
    ]
  },
  {
    "front": "Which HTML table attributes for data arrangement are deprecated in HTML5, and what CSS properties replace them?",
    "back": "The `align` and `valign` attributes are deprecated. They are replaced by the CSS properties `text-align` (for horizontal alignment) and `vertical-align` (for vertical alignment).",
    "tags": [
      "HTML",
      "CSS",
      "Deprecated"
    ]
  },
  {
    "front": "What are the two forms of character references in HTML?",
    "back": "1. **Numeric character references** (e.g., `&#60;` for <).\n2. **Character entity references** (e.g., `&lt;` for <). The document recommends using entity references.",
    "tags": [
      "HTML",
      "Characters"
    ]
  },
  {
    "front": "How is the `id` attribute used to create an in-page anchor link?",
    "back": "An element is given a unique `id` (e.g., `<h2 id=\"section2\">`). An anchor (`<a>`) tag can then link to it using a hash symbol in its `href` attribute (e.g., `<a href=\"#section2\">`).",
    "tags": [
      "HTML",
      "Links",
      "Attributes"
    ]
  },
  {
    "front": "What is the purpose of the `<iframe>` tag in HTML?",
    "back": "It is used to embed another website or document within the current HTML document, creating an inline frame.",
    "tags": [
      "HTML",
      "Iframe",
      "Embedding"
    ]
  },
  {
    "front": "What is the purpose of the `<META>` element in HTML?",
    "back": "It provides metadata about the HTML document, such as `description`, `keywords`, `author`, or instructions for search engine robots (e.g., `robots` content=\"noindex,follow\").",
    "tags": [
      "HTML",
      "Metadata"
    ]
  },
  {
    "front": "How can you apply different styles to nested elements of the same type in CSS (e.g., a list within a list)?",
    "back": "By using more specific selectors. For example, `ul { color: red; }` targets all `<ul>` elements, while `ul ul { color: gray; }` targets only `<ul>` elements that are nested inside another `<ul>`.",
    "tags": [
      "CSS",
      "Selectors",
      "Specificity"
    ]
  },
  {
    "front": "What is the purpose of the `media` attribute in a `<style>` or `<link>` tag?",
    "back": "It specifies different styles for different media types, allowing the document to be presented appropriately for contexts like `screen`, `print`, or `projection`.",
    "tags": [
      "CSS",
      "Media Queries"
    ]
  },
  {
    "front": "What is the general difference between a CSS pseudo-class and a pseudo-element?",
    "back": "**Pseudo-classes** select elements based on a state or characteristic (e.g., `:hover`, `:first-child`).\n**Pseudo-elements** style a specific part of an element (e.g., `::first-line`, `::before`).",
    "tags": [
      "CSS",
      "Pseudo-classes",
      "Pseudo-elements"
    ]
  },
  {
    "front": "What are the four main components of the CSS Box Model, from innermost to outermost?",
    "back": "1. **Content**: The text, images, etc.\n2. **Padding**: The transparent area around the content.\n3. **Border**: A border that goes around the padding and content.\n4. **Margin**: A transparent area outside the border that separates the element from others.",
    "tags": [
      "CSS",
      "Box Model"
    ]
  },
  {
    "front": "What are two key security-related limitations of client-side JavaScript?",
    "back": "1. **No direct file system access:** It cannot read or write local files for security reasons.\n2. **Same-Origin Policy:** It is restricted from making network requests to domains different from the one that served the web page.",
    "tags": [
      "JavaScript",
      "Security"
    ]
  },
  {
    "front": "What is a JavaScript object constructor?",
    "back": "It is a function used to create and initialize objects. It is called with the `new` operator, and inside the function, the `this` keyword refers to the new object being created.",
    "tags": [
      "JavaScript",
      "Objects"
    ]
  },
  {
    "front": "In JavaScript, what is the difference between `undefined` and `null`?",
    "back": "`undefined` means a variable has been declared but has not been assigned a value. `null` is an intentional assignment value that represents the absence of any object value.",
    "tags": [
      "JavaScript",
      "Data Types"
    ]
  },
  {
    "front": "When creating a JSON structure, when should you use an object versus an array?",
    "back": "Use an **object** (key-value pairs) when the keys are arbitrary strings. Use an **array** when the keys are sequential integers (i.e., for an ordered list).",
    "tags": [
      "JSON",
      "Data Structures"
    ]
  },
  {
    "front": "What is a 'reviver' function in the context of `JSON.parse()`?",
    "back": "A reviver is an optional second argument to `JSON.parse()`. It's a function that is called for each key-value pair during parsing, allowing you to transform values on the fly (e.g., converting a date string into a Date object).",
    "tags": [
      "JSON",
      "JavaScript"
    ]
  },
  {
    "front": "What is the basic structure of a `fetch()` call for getting and parsing JSON data?",
    "back": "It's a promise-based chain: `fetch(url).then(response => response.json()).then(data => { /* handle data */ }).catch(error => { /* handle error */ });`",
    "tags": [
      "JavaScript",
      "Fetch API",
      "Promises",
      "AJAX"
    ]
  },
  {
    "front": "What do `document.getElementById()`, `getElementsByTagName()`, and `querySelectorAll()` do?",
    "back": "- `getElementById()`: Returns the single element with a matching ID.\n- `getElementsByTagName()`: Returns a live HTMLCollection of all elements with the given tag name.\n- `querySelectorAll()`: Returns a static NodeList of all elements matching a CSS selector.",
    "tags": [
      "JavaScript",
      "DOM"
    ]
  },
  {
    "front": "Why is using the `+=` operator with `innerHTML` (e.g., `elem.innerHTML += '...'`) often inefficient?",
    "back": "It forces the browser to re-serialize, re-parse, and re-render the entire HTML content of the element every time it's called. A better alternative is to use `document.createElement()` and `appendChild()`.",
    "tags": [
      "JavaScript",
      "DOM",
      "Performance"
    ]
  },
  {
    "front": "How do you parse an XML string retrieved using the Fetch API?",
    "back": "First, get the response as text using `response.text()`. Then, create a new `DOMParser` instance and use its `parseFromString(xmlText, \"text/xml\")` method to convert the string into a document object.",
    "tags": [
      "JavaScript",
      "Fetch API",
      "XML",
      "DOMParser"
    ]
  },
  {
    "front": "What is the `window` object in client-side JavaScript?",
    "back": "It is the highest-level, global object that represents the browser window or tab. It acts as the global scope for all JavaScript variables, functions, and objects.",
    "tags": [
      "JavaScript",
      "BOM",
      "Window"
    ]
  },
  {
    "front": "In JavaScript, are objects passed to functions by value or by reference? What is the implication?",
    "back": "Objects are passed by reference (technically, the reference is passed by value). This means if a function modifies a property of an object passed into it, the change will affect the original object outside the function.",
    "tags": [
      "JavaScript",
      "Functions",
      "Objects"
    ]
  },
  {
    "front": "What is type coercion in JavaScript? Give an example.",
    "back": "It's the automatic conversion of a value from one data type to another. Example: In the expression `'3' * '5'`, JavaScript coerces the strings to numbers to get `15`.",
    "tags": [
      "JavaScript",
      "Data Types",
      "Type Coercion"
    ]
  },
  {
    "front": "What is 'hoisting' in JavaScript for variables declared with `var`?",
    "back": "The declaration (`var x;`) is conceptually moved to the top of its scope, but the initialization (`x = 5;`) remains in place. This means the variable exists throughout the scope but is `undefined` until its assignment line is executed.",
    "tags": [
      "JavaScript",
      "Hoisting",
      "Scope",
      "var"
    ]
  },
  {
    "front": "What is the 'Temporal Dead Zone' (TDZ) for `let` and `const` variables?",
    "back": "It is the period between the start of a scope and the line where a `let` or `const` variable is declared. Accessing the variable within this zone results in a `ReferenceError`.",
    "tags": [
      "JavaScript",
      "Hoisting",
      "Scope",
      "let",
      "const"
    ]
  },
  {
    "front": "How does hoisting differ for function declarations vs. function expressions?",
    "back": "**Function Declarations**: The entire function (name and body) is hoisted, so it can be called before it appears in the code.\n**Function Expressions**: Only the variable declaration is hoisted (as `undefined`). The function body is not assigned until the execution reaches that line, so it cannot be called beforehand.",
    "tags": [
      "JavaScript",
      "Hoisting",
      "Functions"
    ]
  },
  {
    "front": "What do the JavaScript String methods `search()`, `replace()`, and `match()` do with a regular expression?",
    "back": "- `search()`: Returns the index of the first match, or -1.\n- `replace()`: Finds a match and replaces it with a new string.\n- `match()`: Returns an array containing the results of matching a string against a regex.",
    "tags": [
      "JavaScript",
      "Regex",
      "Strings"
    ]
  },
  {
    "front": "In regular expressions, what is the purpose of square brackets `[]` and a caret inside them `[^...]`?",
    "back": "`[abc]` defines a character set; it matches any single character inside the brackets. `[^abc]` is a negated character set; it matches any single character NOT inside the brackets.",
    "tags": [
      "Regex",
      "Syntax"
    ]
  },
  {
    "front": "In regular expressions, what do the quantifiers `+`, `*`, and `?` mean?",
    "back": "`+` matches one or more of the preceding element.\n`*` matches zero or more of the preceding element.\n`?` matches zero or one of the preceding element.",
    "tags": [
      "Regex",
      "Syntax",
      "Quantifiers"
    ]
  },
  {
    "front": "In regular expressions, what is the purpose of parentheses `()`?",
    "back": "They create a capturing group. The part of the string matched by the pattern inside the parentheses is 'captured' and can be accessed from the result array of a method like `match()` or `exec()`.",
    "tags": [
      "Regex",
      "Syntax",
      "Groups"
    ]
  }
]